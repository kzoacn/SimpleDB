package simpledb;

import java.util.*;
import java.io.IOException;
/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    JoinPredicate p;
    DbIterator child1;
    DbIterator child2;
    HashMap<Field,ArrayList<Tuple> > hashMap;
    Tuple t2;
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p=p;
    	this.child1=child1;
    	this.child2=child2;
    	hashMap=new HashMap<Field, ArrayList<Tuple>>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	child1.open();
    	child2.open();
    	listIt=null;
    	t2=null;
    	while(child1.hasNext()) {
    		Tuple tuple=child1.next();
    		Field key=tuple.getField(p.field1);
    		
    		System.out.println(tuple);
    		
    		if(hashMap.containsKey(key)) {
    			hashMap.get(key).add(tuple);
    		}else {
    			ArrayList<Tuple> arrayList=new ArrayList<Tuple>();
    			arrayList.add(tuple);
    			hashMap.put(key, arrayList);	
    		}
    	}
    }

    public void close() {
        // some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    	hashMap.clear();
    	listIt=null;
    	t2=null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	child1.rewind();
    	child2.rewind();
    	
    	listIt=null;
    }


    transient Iterator<Tuple> listIt;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	while(true) {
    		if(listIt==null || !listIt.hasNext()) {
    			while(child2.hasNext()) {
    				t2=child2.next();
    				if(hashMap.containsKey(t2.getField(p.field2))) {
    					listIt=hashMap.get(t2.getField(p.field2)).iterator();
    					break;
    				}
    			}
    			if(listIt==null || !listIt.hasNext())
    				return null;
    		}
    		Tuple t1=listIt.next();
    		return Tuple.merge(t1, t2);
    	}
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }
    
}
